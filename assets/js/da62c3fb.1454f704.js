"use strict";(self.webpackChunkOpenRefine_Documentation=self.webpackChunkOpenRefine_Documentation||[]).push([[622],{73091:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>c});var s=r(64861),i=r(69018);const t={id:"openrefine-api",title:"OpenRefine API",sidebar_label:"OpenRefine API"},o=void 0,l={id:"technical-reference/openrefine-api",title:"OpenRefine API",description:"This is a generic API reference for interacting with OpenRefine's HTTP API.",source:"@site/docs/technical-reference/openrefine-api.md",sourceDirName:"technical-reference",slug:"/technical-reference/openrefine-api",permalink:"/docs/technical-reference/openrefine-api",draft:!1,unlisted:!1,editUrl:"https://github.com/OpenRefine/openrefine.github.com/edit/master/docs/technical-reference/openrefine-api.md",tags:[],version:"current",lastUpdatedBy:"Aakash Amod Rajput",lastUpdatedAt:1705053301e3,frontMatter:{id:"openrefine-api",title:"OpenRefine API",sidebar_label:"OpenRefine API"},sidebar:"docs",previous:{title:"Clustering methods in-depth",permalink:"/docs/technical-reference/clustering-in-depth"},next:{title:"Reconciliation API",permalink:"/docs/technical-reference/reconciliation-api"}},a={},c=[{value:"Create project:",id:"create-project",level:2},{value:"Get project models:",id:"get-project-models",level:3},{value:"Response:",id:"response",level:3},{value:"Rename Project or Change Metadata",id:"rename-project-or-change-metadata",level:2},{value:"Change Project Tags",id:"change-project-tags",level:2},{value:"Apply operations",id:"apply-operations",level:2},{value:"Export rows",id:"export-rows",level:2},{value:"Delete project",id:"delete-project",level:2},{value:"Check status of async processes",id:"check-status-of-async-processes",level:2},{value:"Get all projects metadata:",id:"get-all-projects-metadata",level:2},{value:"Response:",id:"response-1",level:3},{value:"Expression Preview",id:"expression-preview",level:2},{value:"Parameters:",id:"parameters",level:3},{value:"Response:",id:"response-2",level:3},{value:"Third-party software libraries",id:"third-party-software-libraries",level:2},{value:"Python",id:"python",level:3},{value:"Ruby",id:"ruby",level:3},{value:"NodeJS",id:"nodejs",level:3},{value:"R",id:"r",level:3},{value:"PHP",id:"php",level:3},{value:"Java",id:"java",level:3},{value:"Bash",id:"bash",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"This is a generic API reference for interacting with OpenRefine's HTTP API."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"NOTE:"})," This protocol is subject to change without warning at any time (and has in the past) and is not versioned. Use at your own risk!"]}),"\n",(0,s.jsxs)(n.p,{children:["For OpenRefine 3.3 and later, all POST requests need to include a CSRF token as described ",(0,s.jsx)(n.a,{href:"https://github.com/OpenRefine/OpenRefine/wiki/Changes-for-3.3#csrf-protection-changes",children:"in the release notes"})]}),"\n",(0,s.jsx)(n.h2,{id:"create-project",children:"Create project:"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Command:"})," ",(0,s.jsx)(n.em,{children:"POST /command/core/create-project-from-upload"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["When uploading files you will need to send the data as ",(0,s.jsx)(n.code,{children:"multipart/form-data"}),". This is different to all other API calls which use a mixture of query string and POST parameters."]}),"\n",(0,s.jsx)(n.p,{children:"multipart form-data:"}),"\n",(0,s.jsxs)(n.p,{children:["'project-file' : file contents\n'project-name' : project name\n'format' : format of data in project-file (e.g. 'text/line-based/*sv') [optional]\n'options' : json object containing options relevant to the file format [optional - however, some importers may have required options, such as ",(0,s.jsx)(n.code,{children:"recordPath"})," for the JSON & XML importers]."]}),"\n",(0,s.jsx)(n.p,{children:"The formats supported will depend on the version of OpenRefine you are using and any Extensions you have installed. The common formats include:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"'text/line-based': Line-based text files"}),"\n",(0,s.jsx)(n.li,{children:"'text/line-based/*sv': CSV / TSV / separator-based files [separator to be used in specified in the json submitted to the options parameter]"}),"\n",(0,s.jsx)(n.li,{children:"'text/line-based/fixed-width': Fixed-width field text files"}),"\n",(0,s.jsx)(n.li,{children:"'binary/text/xml/xls/xlsx': Excel files"}),"\n",(0,s.jsx)(n.li,{children:"'text/json': JSON files"}),"\n",(0,s.jsx)(n.li,{children:"'text/xml': XML files"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"If the format is omitted OpenRefine will try to guess the format based on the file extension and MIME type.\nThe values which can be specified in the JSON object submitted to the 'options' parameter will vary depending on the format being imported. If not specified the options will either be guessed at by OpenRefine (e.g. separator being used in a separated values file) or a default value used. The import options for each file format are not currently documented, but can be seen in the OpenRefine GUI interface when importing a file of the relevant format."}),"\n",(0,s.jsx)(n.p,{children:"If the project creation is successful, you will be redirected to a URL of the form:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"      http://127.0.0.1:3333/project?project=<project id>\n"})}),"\n",(0,s.jsx)(n.p,{children:"From the project parameter you can extract the project id for use in future API calls. The content of the response is the HTML for the OpenRefine interface for viewing the project."}),"\n",(0,s.jsx)(n.h3,{id:"get-project-models",children:"Get project models:"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Command:"})," ",(0,s.jsx)(n.em,{children:"GET /command/core/get-models?"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"'project' : project id"}),"\n",(0,s.jsx)(n.p,{children:"Recovers the models for the specific project. This includes  columns, records, overlay models, scripting. In the columnModel a list of the columns is displayed, key index and name, and column groupings."}),"\n",(0,s.jsx)(n.h3,{id:"response",children:"Response:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"On success:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n   "columnModel":{\n      "columns":[\n         {\n            "cellIndex":0,\n            "originalName":"email",\n            "name":"email"\n         },\n         {\n            "cellIndex":1,\n            "originalName":"name",\n            "name":"name"\n         },\n         {\n            "cellIndex":2,\n            "originalName":"state",\n            "name":"state"\n         },\n         {\n            "cellIndex":3,\n            "originalName":"gender",\n            "name":"gender"\n         },\n         {\n            "cellIndex":4,\n            "originalName":"purchase",\n            "name":"purchase"\n         }\n      ],\n      "keyCellIndex":0,\n      "keyColumnName":"email",\n      "columnGroups":[\n\n      ]\n   },\n   "recordModel":{\n      "hasRecords":false\n   },\n   "overlayModels":{\n\n   },\n   "scripting":{\n      "grel":{\n         "name":"General Refine Expression Language (GREL)",\n         "defaultExpression":"value"\n      },\n      "jython":{\n         "name":"Python / Jython",\n         "defaultExpression":"return value"\n      },\n      "clojure":{\n         "name":"Clojure",\n         "defaultExpression":"value"\n      }\n   }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"rename-project-or-change-metadata",children:"Rename Project or Change Metadata"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Command:"})," ",(0,s.jsx)(n.em,{children:"POST /command/core/set-project-metadata"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Use this command to rename a proejct or change project metadata as described in ",(0,s.jsx)(n.a,{href:"../manual/starting#project-management",children:"Project management"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"In the form data"}),"\n",(0,s.jsx)(n.p,{children:"'project' : project id\n'name': metadata field, one of: name, creator, contributors, subject, description, title, version, license, homepage, image, customMetadata\n'value': metadata value"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["To rename a project, use the ",(0,s.jsx)(n.code,{children:"name"})," metadata field."]}),"\n",(0,s.jsxs)(n.li,{children:["To set custom metadata fields, use ",(0,s.jsx)(n.code,{children:"customMetadata"})," and a JSON object ",(0,s.jsx)(n.code,{children:"value"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"change-project-tags",children:"Change Project Tags"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Command:"})," ",(0,s.jsx)(n.em,{children:"POST /command/core/set-project-tags"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Tags are used to organize projects, see  ",(0,s.jsx)(n.a,{href:"../manual/starting#project-management",children:"Project management"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"In the form data"}),"\n",(0,s.jsx)(n.p,{children:"'project' : project id\n'old': tags to remove (comma-separated list)\n'new': tags to add (comma-separated list)"}),"\n",(0,s.jsx)(n.h2,{id:"apply-operations",children:"Apply operations"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Command:"})," ",(0,s.jsx)(n.em,{children:"POST /command/core/apply-operations?"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"In the parameter"}),"\n",(0,s.jsx)(n.p,{children:"'project' : project id"}),"\n",(0,s.jsx)(n.p,{children:"In the form data"}),"\n",(0,s.jsxs)(n.p,{children:["'operations' : Valid JSON ",(0,s.jsx)(n.strong,{children:"Array"})," of OpenRefine operations"]}),"\n",(0,s.jsxs)(n.p,{children:["Example of a Valid JSON ",(0,s.jsx)(n.strong,{children:"Array"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\n   {\n      "op":"core/column-addition",\n      "description":"Create column zip type at index 15 based on column Zip Code 2 using expression grel:value.type()",\n      "engineConfig":{\n         "mode":"row-based",\n         "facets":[]\n      },\n      "newColumnName":"zip type",\n      "columnInsertIndex":15,\n      "baseColumnName":"Zip Code 2",\n      "expression":"grel:value.type()",\n      "onError":"set-to-blank"\n   },\n   {\n      "op":"core/column-addition",\n      "description":"Create column testing at index 15 based on column Zip Code 2 using expression grel:value.toString()0,5]",\n      "engineConfig":{\n         "mode":"row-based",\n         "facets":[]\n      },\n      "newColumnName":"testing",\n      "columnInsertIndex":15,\n      "baseColumnName":"Zip Code 2",\n      "expression":"grel:value.toString()[0,5]",\n      "onError":"set-to-blank"\n   }\n]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["On success returns JSON response\n",(0,s.jsx)(n.code,{children:'{ "code" : "ok" }'})]}),"\n",(0,s.jsx)(n.h2,{id:"export-rows",children:"Export rows"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Command:"})," ",(0,s.jsx)(n.em,{children:"POST /command/core/export-rows"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"In the parameter"}),"\n",(0,s.jsx)(n.p,{children:"'project' : project id\n'format' : format... (e.g 'tsv', 'csv')"}),"\n",(0,s.jsx)(n.p,{children:"In the form data"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'      "engine" : JSON string... (e.g. \'{"facets":[],"mode":"row-based"}\')\n'})}),"\n",(0,s.jsx)(n.p,{children:"Returns exported row data in the specified format. The formats supported will depend on the version of OpenRefine you are using and any Extensions you have installed. The common formats include:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"csv"}),"\n",(0,s.jsx)(n.li,{children:"tsv"}),"\n",(0,s.jsx)(n.li,{children:"xls"}),"\n",(0,s.jsx)(n.li,{children:"xlsx"}),"\n",(0,s.jsx)(n.li,{children:"ods"}),"\n",(0,s.jsx)(n.li,{children:"html"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"delete-project",children:"Delete project"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Command:"})," ",(0,s.jsx)(n.em,{children:"POST /command/core/delete-project"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"'project' : project id..."}),"\n",(0,s.jsx)(n.p,{children:"Returns JSON response"}),"\n",(0,s.jsx)(n.h2,{id:"check-status-of-async-processes",children:"Check status of async processes"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Command:"})," ",(0,s.jsx)(n.em,{children:"GET /command/core/get-processes"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"'project' : project id..."}),"\n",(0,s.jsx)(n.p,{children:"Returns JSON response"}),"\n",(0,s.jsx)(n.h2,{id:"get-all-projects-metadata",children:"Get all projects metadata:"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Command:"})," ",(0,s.jsx)(n.em,{children:"GET /command/core/get-all-project-metadata"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Recovers the meta data for all projects. This includes the project's id, name, time of creation and last time of modification."}),"\n",(0,s.jsx)(n.h3,{id:"response-1",children:"Response:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "projects":{\n        "[project_id]":{\n            "name":"[project_name]",\n            "created":"[project_creation_time]",\n            "modified":"[project_modification_time]"\n        },\n        ...[More projects]...\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"expression-preview",children:"Expression Preview"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Command:"})," ",(0,s.jsx)(n.em,{children:"POST /command/core/preview-expression"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Pass some expression (GREL or otherwise) to the server where it will be executed on selected columns and the result returned."}),"\n",(0,s.jsx)(n.h3,{id:"parameters",children:"Parameters:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"cellIndex"}),": ",(0,s.jsx)(n.em,{children:"[column]"}),"\nThe cell/column you wish to execute the expression on."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"rowIndices"}),": ",(0,s.jsx)(n.em,{children:"[rows]"}),"\nThe rows to execute the expression on as JSON array. Example: ",(0,s.jsx)(n.code,{children:"[0,1]"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"expression"}),": ",(0,s.jsx)(n.em,{children:"[language]"}),":",(0,s.jsx)(n.em,{children:"[expression]"}),"\nThe expression to execute. The language can either be grel, jython or clojure. Example: grel",":value",".toLowercase()"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"project"}),": ",(0,s.jsx)(n.em,{children:"[project_id]"}),"\nThe project id to execute the expression on."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"repeat"}),": ",(0,s.jsx)(n.em,{children:"[repeat]"}),"\nA boolean value (true/false) indicating whether or not this command should be repeated multiple times. A repeated command will be executed until the result of the current iteration equals the result of the previous iteration."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"repeatCount"}),": ",(0,s.jsx)(n.em,{children:"[repeatCount]"}),"\nThe maximum amount of times a command will be repeated."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"response-2",children:"Response:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"On success:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "code": "ok",\n  "results" : [result_array]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"The result array will hold up to ten results, depending on how many rows there are in the project that was specified by the [project_id] parameter. Each result is the string that would be put in the cell if the GREL command was executed on that cell. Note that any expression that would return an array or JSon object will be jsonized, although the output can differ slightly from the jsonize() function."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"On error:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "code": "error",\n  "type": "[error_type]",\n  "message": "[error message]"\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"third-party-software-libraries",children:"Third-party software libraries"}),"\n",(0,s.jsxs)(n.p,{children:["Libraries using the ",(0,s.jsx)(n.a,{href:"openrefine-api",children:"OpenRefine API"}),":"]}),"\n",(0,s.jsx)(n.h3,{id:"python",children:"Python"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/PaulMakepeace/refine-client-py/",children:"refine-client-py"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/opencultureconsulting/openrefine-client",children:"openrefine-client"}),", a fork of the above with an extended CLI"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/maxogden/refine-python",children:"refine-python"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"ruby",children:"Ruby"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/distillytics/refine-ruby",children:"refine-ruby"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The above is a maintained fork of ",(0,s.jsx)(n.a,{href:"https://github.com/maxogden/refine-ruby",children:"refine-ruby"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/chengguangnan/google_refine",children:"google_refine"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"nodejs",children:"NodeJS"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/pm5/node-openrefine",children:"node-openrefine"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"r",children:"R"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://cran.r-project.org/web/packages/rrefine/index.html",children:"rrefine"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"php",children:"PHP"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/keboola/openrefine-php-client",children:"openrefine-php-client"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"java",children:"Java"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/ancore/refine-java",children:"refine-java"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"bash",children:"Bash"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://gist.github.com/felixlohmeier/d76bd27fbc4b8ab6d683822cdf61f81d",children:"bash-refine.sh"})," (templates for shell scripts)"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},69018:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>o});var s=r(47768);const i={},t=s.createContext(i);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);