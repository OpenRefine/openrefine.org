"use strict";(self.webpackChunkOpenRefine_Documentation=self.webpackChunkOpenRefine_Documentation||[]).push([[4660],{1847:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var i=t(64861),s=t(69018);const a={id:"schema-alignment",title:"Schema alignment",sidebar_label:"Schema alignment"},r=void 0,l={id:"manual/wikibase/schema-alignment",title:"Schema alignment",description:"A Wikibase schema is a template of Wikibase edits that is applied",source:"@site/docs/manual/wikibase/schema-alignment.md",sourceDirName:"manual/wikibase",slug:"/manual/wikibase/schema-alignment",permalink:"/docs/manual/wikibase/schema-alignment",draft:!1,unlisted:!1,editUrl:"https://github.com/OpenRefine/openrefine.github.com/edit/master/docs/manual/wikibase/schema-alignment.md",tags:[],version:"current",lastUpdatedBy:"Antonin Delpeuch",lastUpdatedAt:1686576492e3,frontMatter:{id:"schema-alignment",title:"Schema alignment",sidebar_label:"Schema alignment"},sidebar:"docs",previous:{title:"Reconciling with Wikibase",permalink:"/docs/manual/wikibase/reconciling"},next:{title:"New items",permalink:"/docs/manual/wikibase/new-entities"}},o={},d=[{value:"Items",id:"items",level:2},{value:"Terms",id:"terms",level:2},{value:"Languages",id:"languages",level:3},{value:"Labels",id:"labels",level:3},{value:"Descriptions",id:"descriptions",level:3},{value:"Aliases",id:"aliases",level:3},{value:"Statements",id:"statements",level:2},{value:"Main values",id:"main-values",level:3},{value:"Qualifiers",id:"qualifiers",level:3},{value:"References",id:"references",level:3},{value:"Editing mode",id:"editing-mode",level:3},{value:"Matching strategy",id:"matching-strategy",level:3},{value:"Lax value matching",id:"lax-value-matching",level:4},{value:"Ranks",id:"ranks",level:3},{value:"Data values",id:"data-values",level:2},{value:"Items",id:"items-1",level:3},{value:"Strings and external identifiers",id:"strings-and-external-identifiers",level:3},{value:"Monolingual texts",id:"monolingual-texts",level:3},{value:"Dates",id:"dates",level:3},{value:"Quantities",id:"quantities",level:3},{value:"Globe coordinates",id:"globe-coordinates",level:3},{value:"Media on Commons",id:"media-on-commons",level:3},{value:"Properties",id:"properties",level:3},{value:"Other data types",id:"other-data-types",level:3}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"A Wikibase schema is a template of Wikibase edits that is applied\nto each row in the project. This page describes how each part of this\ntemplate works, and how it generates edits depending on the contents of\nthe table cells."}),"\n",(0,i.jsx)(n.h2,{id:"items",children:"Items"}),"\n",(0,i.jsxs)(n.p,{children:["An item in the schema represents a set of changes on a particular\nWikibase item, generated by a single row. This item can contain changes\nin ",(0,i.jsx)(n.a,{href:"#terms",children:"terms"})," (labels, descriptions and aliases) or\n",(0,i.jsx)(n.a,{href:"#statements",children:"statements"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"It is possible to make edits on different items for each row of your\ntable: just add multiple items in your schema. Each item has a subject,\nwhich can be either entered manually (when the item on which the edits\nshould be made is the same for all rows), or any reconciled column can\nbe dropped in this field. In this case, the edits will depend on the\nreconciliation status of each cell:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If the cell is matched to an item, edits will be made on that item;"}),"\n",(0,i.jsxs)(n.li,{children:["If the cell is marked as corresponding to a new item, a new item\nwill be created for it. See ",(0,i.jsx)(n.a,{href:"./new-entities",children:"New items"})," for more\ndetails about how this works;"]}),"\n",(0,i.jsx)(n.li,{children:"If the cell has reconciliation candidates but has not been matched\nto any of them, the edit will be skipped (even if there is only one\ncandidate with a high reconciliation score);"}),"\n",(0,i.jsx)(n.li,{children:"If the cell is not reconciled or blank, the edit will be skipped."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Do not worry about the ordering of items in the schema or the order of\nyour rows, as OpenRefine will rearrange your edits to optimize their\nupload. If your project makes edits on the same item across multiple\nrows, these edits will be merged together and performed in one edit. See\n",(0,i.jsx)(n.a,{href:"./uploading",children:"Uploading your changes"})," about that."]}),"\n",(0,i.jsx)(n.h2,{id:"terms",children:"Terms"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Terms"})," are the language-specific strings that you find at the top of\nWikibase items: labels, descriptions and aliases. OpenRefine lets you\nedit these terms via the Wikibase schema."]}),"\n",(0,i.jsx)(n.h3,{id:"languages",children:"Languages"}),"\n",(0,i.jsxs)(n.p,{children:["Each term belongs to a particular language. Wikibase supports ",(0,i.jsx)(n.a,{href:"https://www.wikidata.org/wiki/Help:Wikimedia_language_codes/lists/all",children:"hundreds\nof languages"}),", which\nare designated by language codes. For each term that you want to add to\nan item, you will need to specify the language for this term. There are\ntwo cases:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Either the language is constant across your dataset: you know that\nall the names in a given column are spelled in the same language. In\nthis case, type the name of the language in the input and select the\nlanguage in the drop-down suggestion dialog. This will place the\nappropriate language code in the input."}),"\n",(0,i.jsx)(n.li,{children:"Or the language varies across your dataset. In this case, you need\nto provide a column of Wikimedia language codes that indicates the\nlanguage for each term that you want to add. Just drag and drop this\ncolumn to the language field. If there are any invalid language\ncodes in this column, the corresponding terms will be ignored.\nOpenRefine will translate any deprecated language codes to their\npreferred values silently."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"labels",children:"Labels"}),"\n",(0,i.jsx)(n.p,{children:"This is because Wikibase items can have at most one label per language,\nso you need to choose whether to override any existing label (default\nbehaviour before 3.2) or only insert your label if there is no such\nlabel in the given language (default behaviour starting from 3.2). When\nthe content of the cell providing the label is blank, nothing will be\nchanged (so, it is not possible to remove labels)."}),"\n",(0,i.jsx)(n.h3,{id:"descriptions",children:"Descriptions"}),"\n",(0,i.jsx)(n.p,{children:"Descriptions work like labels: there is at most one description per\nlanguage, and OpenRefine can override existing descriptions or leave\nthem unchanged. It is not possible to remove descriptions either."}),"\n",(0,i.jsx)(n.h3,{id:"aliases",children:"Aliases"}),"\n",(0,i.jsx)(n.p,{children:"Aliases are added to the list of existing aliases in the given language.\nWhen adding an alias in a language where no label has been added yet,\nthe alias is automatically promoted to a label for this language. It is\nnot possible to remove aliases or to override any existing aliases."}),"\n",(0,i.jsx)(n.h2,{id:"statements",children:"Statements"}),"\n",(0,i.jsxs)(n.p,{children:["You can add statements in the schema: this will generate new statements\non the corresponding items. These statements will be merged with any\nexisting statements on the actual Wikibase items and ",(0,i.jsx)(n.a,{href:"./uploading#Merging-strategies-for-statements",children:"this merging process depends on the upload medium"}),".\nIt is forecast to give more control over the merging strategy in the\nnear future."]}),"\n",(0,i.jsx)(n.h3,{id:"main-values",children:"Main values"}),"\n",(0,i.jsx)(n.p,{children:"The main value of a statement is a\ndata value whose type depends on the property used for the statement. If\nthe main value cannot be evaluated (for instance because one of the\ncells it depends on is empty), then the entire statement will be\nskipped."}),"\n",(0,i.jsxs)(n.p,{children:['Statements with "no value" or "some value" can be inserted by using the special\nkeywords ',(0,i.jsx)(n.code,{children:"#NOVALUE#"})," and ",(0,i.jsx)(n.code,{children:"#SOMEVALUE#"}),", used in place of the value\n(either directly in the schema or via a column). This is supported since OpenRefine 3.7."]}),"\n",(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(n.a,{href:"#data-values",children:"data values"})," section for more details\nabout how to specify each type of data value and when they are skipped."]}),"\n",(0,i.jsx)(n.h3,{id:"qualifiers",children:"Qualifiers"}),"\n",(0,i.jsx)(n.p,{children:"Qualifiers can be added on each statement. When their values are\nskipped, only the qualifier will be discarded: the rest of the statement\nwill still be added."}),"\n",(0,i.jsx)(n.h3,{id:"references",children:"References"}),"\n",(0,i.jsx)(n.p,{children:"References can (and should) be added to back each statement. If values\ninside the reference are skipped, the corresponding part of the\nreference will be discarded but the reference will still be added\n(unless the reference becomes empty)."}),"\n",(0,i.jsx)(n.h3,{id:"editing-mode",children:"Editing mode"}),"\n",(0,i.jsx)(n.p,{children:"The editing mode of a statement determines how it contributes to the corresponding entity.\nOpenRefine offers three editing modes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Add or merge"}),", which adds the statement or merges it with the first existing statement that matches it;"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Add"}),", which only adds the statement if there are no matching statements on the entity. Otherwise, leave those statements untouched;"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Delete"}),", which deletes all matching statements."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The way statements are matched is controlled by the matching strategy, which can be configured for each statement in the schema."}),"\n",(0,i.jsx)(n.h3,{id:"matching-strategy",children:"Matching strategy"}),"\n",(0,i.jsx)(n.p,{children:"The matching strategy determines how the candidate statements generated by the schema are compared to the existing statements on the entity. OpenRefine offers three merging strategies:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Property"}),", which compares statements by their main property only. This means that any two statements using the same main property will be considered equivalent. For intance, using this merging strategy in conjunction with the ",(0,i.jsx)(n.strong,{children:"Delete"})," editing\nmode will delete all statements with a particular main property on the target entity."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Property and value"}),", which compares statements by their main property and main value only. This is what QuickStatements does. In addition, it is possible (and enabled by default) to match statement values in a lax way, for instance to ignore\ndifferences in trailing whitespace or rounding of quantities."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Qualifiers"}),", which compare statements using their property, main value and qualifiers. It is possible to define a list of property identifiers which determines which qualifiers are discriminating. Other qualifiers will not be taken into account when\ncomparing statements. By default, all qualifiers are taken into account. This matching strategy also supports lax value matching."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"These matching strategies are not honoured when exporting to QuickStatements, as the QuickStatements formats do not make it possible to represent them."}),"\n",(0,i.jsx)(n.h4,{id:"lax-value-matching",children:"Lax value matching"}),"\n",(0,i.jsx)(n.p,{children:"When lax value matching is enabled, the following values are considered equal for statement matching purposes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["strings which differ by whitespace at the beginning or end (such as ",(0,i.jsx)(n.code,{children:" Berlin"})," and ",(0,i.jsx)(n.code,{children:"Berlin "}),");"]}),"\n",(0,i.jsxs)(n.li,{children:["URLs which differ by trailing slash or ",(0,i.jsx)(n.code,{children:"http"})," / ",(0,i.jsx)(n.code,{children:"https"})," differences (such as ",(0,i.jsx)(n.code,{children:"http://wikiba.se"})," and ",(0,i.jsx)(n.code,{children:"https://wikiba.se/"}),");"]}),"\n",(0,i.jsxs)(n.li,{children:["quantities with the same unit, whose uncertainty domain overlap (such as ",(0,i.jsx)(n.code,{children:"47\xb11"})," and ",(0,i.jsx)(n.code,{children:"48\xb10.5"}),");"]}),"\n",(0,i.jsx)(n.li,{children:"geographical coordinates whose uncertainty domain overlap (note that since the uncertainty of geographical coordinates is expressed in degrees, this does not guarantee a distance threshold below which the coordinates will match);"}),"\n",(0,i.jsx)(n.li,{children:"monolingual text values whose values differ by leading or trailing whitespace;"}),"\n",(0,i.jsxs)(n.li,{children:["dates which differ in attributes which are rendered irrelevant by the lowest precision of both values to compare (such as ",(0,i.jsx)(n.code,{children:"1976-01-01"})," and ",(0,i.jsx)(n.code,{children:"1976"}),")."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"ranks",children:"Ranks"}),"\n",(0,i.jsxs)(n.p,{children:["All statements ranks are set to ",(0,i.jsx)(n.strong,{children:"Normal"}),". It is currently not possible\nto set a different rank."]}),"\n",(0,i.jsx)(n.h2,{id:"data-values",children:"Data values"}),"\n",(0,i.jsx)(n.p,{children:"Data values are the data that you can find as target of a statement (or\nqualifier, or part of a reference). Each property dictates a particular\ntype of data value. In each case, OpenRefine uses a particular process\nto translate cell contents to a data value of the appropriate type. This\nsection explains the process for all data types."}),"\n",(0,i.jsx)(n.h3,{id:"items-1",children:"Items"}),"\n",(0,i.jsxs)(n.p,{children:["Items are evaluated in the same way as the subjects of items in the\nschema. They can be input directly using the auto-suggest service\nprovided, or any column reconciled against Wikibase can be used. Refer to\n",(0,i.jsx)(n.a,{href:"#items",children:"the first Items section"})," to see how they are\nevaluated."]}),"\n",(0,i.jsx)(n.h3,{id:"strings-and-external-identifiers",children:"Strings and external identifiers"}),"\n",(0,i.jsx)(n.p,{children:"Bare strings and external identifiers can be input directly as constants\n(if they do not change across rows) or using any column. If a reconciled\ncolumn is used for a string value, it is the value of the cell that is\ngoing to be used, not the name of the reconciled item (which is what\nOpenRefine displays). Values are skipped when the column is blank or\nnull."}),"\n",(0,i.jsx)(n.h3,{id:"monolingual-texts",children:"Monolingual texts"}),"\n",(0,i.jsx)(n.p,{children:"Monolingual texts consist of two parts:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["the language: see ",(0,i.jsx)(n.a,{href:"#languages",children:"Languages"})," for their\nstructure;"]}),"\n",(0,i.jsxs)(n.li,{children:["the value of the text: see ",(0,i.jsx)(n.a,{href:"#strings-and-external-identifiers",children:"the section above"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"A monolingual text is skipped when any of its parts is skipped (that is,\nif the language or the text are invalid)."}),"\n",(0,i.jsx)(n.h3,{id:"dates",children:"Dates"}),"\n",(0,i.jsx)(n.p,{children:"Dates are parsed from cell contents (or from any constant provided in\nthe schema) and the precision of the date is inferred from its format.\nHere are the valid formats:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"YYYYM"}),", such as ",(0,i.jsx)(n.code,{children:"2001M"})," (millenium precision)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"YYYYC"}),", such as ",(0,i.jsx)(n.code,{children:"1901C"})," (century precision)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"YYYYD"}),", such as ",(0,i.jsx)(n.code,{children:"1981D"})," (decade precision)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"YYYY"}),", such as ",(0,i.jsx)(n.code,{children:"1984"})," (year precision)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"YYYY-MM"}),", such as ",(0,i.jsx)(n.code,{children:"2019-03"})," (month precision)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"YYYY-MM-DD"}),", such as ",(0,i.jsx)(n.code,{children:"1897-08-14"})," (day precision)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Any value that does not match any of these formats will be ignored. All\ndates are represented in UTC, Gregorian calendar."}),"\n",(0,i.jsx)(n.p,{children:"In OpenRefine 3.3, the following new formats have been introduced:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TODAY"})," returns today's date with day precision. This will be\nevaluated when performing the edits (or exporting to\nQuickStatements);"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"YYYY-MM-DD_QID"})," can be used to specify a date in a particular\ncalendar (such as the ",(0,i.jsx)(n.a,{href:"https://www.wikidata.org/wiki/Q1985786",children:"proleptic Julian calendar (Q1985786)"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In OpenRefine 3.5, the following new format has been introduced:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"-234"})," represents the year 234 ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Common_Era",children:"BCE"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"quantities",children:"Quantities"}),"\n",(0,i.jsx)(n.p,{children:"Quantities consist of two parts: the amount and the unit."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["the amount is mandatory and must be a string, such as ",(0,i.jsx)(n.code,{children:"18,229.1020"}),".\nThe precision that is displayed will be respected (the same number\nof trailing zeros will be shown in Wikibase). By default, no upper\nand lower bounds will be set. To define these, one needs to use the\nengineering notation, such as ",(0,i.jsx)(n.code,{children:"3.45E+3"}),", which will be interpreted\nas ",(0,i.jsx)(n.code,{children:"3,450\xb15"}),". As usual, the amount can be provided as a constant or\nas a column variable. In the latter case, the values in the column\nmust be strings."]}),"\n",(0,i.jsx)(n.li,{children:"the unit is optional. It is an item, so it can be provided either\nwith the auto-suggest dialog or as a reconciled column. It is\nimportant to note that if a reconciled column is used, any\nunreconciled cells will discard the entire quantity value. So a\ntemplate for a quantity value is either always unit-less, or always\nhas a unit."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"globe-coordinates",children:"Globe coordinates"}),"\n",(0,i.jsx)(n.p,{children:"Geographic coordinates are specified as strings with the following\nformats, where all components are floating point numbers in degrees:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"latitude,longitude"})," for a default precision of ten micro degrees\n(for instance:\n",(0,i.jsx)(n.a,{href:"https://tools.wmflabs.org/geohack/geohack.php?params=49.265277777778_N_4.0286111111111_E_globe:earth&language=en",children:(0,i.jsx)(n.code,{children:"49.265278,4.028611"})}),"\ncan be used indicate the position of Reims, France."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"latitude,longitude,precision"})," when specifying an explicit precision\n(for instance: ",(0,i.jsx)(n.code,{children:"49.265278,4.028611,0.1"})," can be used indicate the\nposition of Reims within a tenth of a degree)."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["All globe coordinates are on Earth (",(0,i.jsx)(n.a,{href:"https://www.wikidata.org/wiki/Q2",children:"Q2"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["If your coordinates are in a different format, such as\n",(0,i.jsx)(n.code,{children:"49\xb0 15\u2032 55\u2033 N, 4\xb0 1\u2032 43\u2033 E"}),", you will need to convert them to decimal\nformat first."]}),"\n",(0,i.jsx)(n.h3,{id:"media-on-commons",children:"Media on Commons"}),"\n",(0,i.jsx)(n.p,{children:"Media on Wikimedia Commons is treated like strings, whose values must\nexactly match filenames on Commons. These values are not checked during\nschema evaluations: if they are wrong, uploading the statements will\nfail."}),"\n",(0,i.jsxs)(n.p,{children:["Tabular data and Geoshapes must be prefixed with the ",(0,i.jsx)(n.code,{children:"Data:"})," namespace.\nThis is indicated by the placeholder in the field that appears when\nconstructing the schema."]}),"\n",(0,i.jsx)(n.h3,{id:"properties",children:"Properties"}),"\n",(0,i.jsx)(n.p,{children:"Properties are always constants: there is currently no way to reconcile\na column against properties. They have to be selected with the\nauto-suggest dialog."}),"\n",(0,i.jsx)(n.h3,{id:"other-data-types",children:"Other data types"}),"\n",(0,i.jsx)(n.p,{children:"URLs, mathematical expressions and other textual datatypes are supported\nand treated as strings. At the time of writing, all datatypes supported\nby Wikibase are supported by OpenRefine."})]})}function c(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},69018:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>r});var i=t(47768);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);